#!/bin/bash
version="0.0.1"

errorBanner="$(cat <<-EOF
error during command or command not found.
type ./shell help for help."
EOF
)"

helpMessage="$(cat <<-EOF
HELP
----

help:
shkv help

set value:
shkv set key value

append:
shkv append key value

append with crlf after value:
shkv appendr key value

get key file full path:
shkv path key

remove key:
shkv del key

list add item:
shkv list add key item

list del item:
shkv list del key
if you need no duplicates: before list add you can always call list del

list foreach key callback:
item is passed as $1 in callback
export -f callback
shkv list foreach callback

dict set prop:
shkv dict set key prop value comment

EOF
)"

help () {
    echo "version: ${version}"
    echo "${helpMessage}"
    exit
}

#
# set key value
#
setVal () {
    local key="$1"
    local value="${*:2}"

    echo -n "${value}" > "${store}/${key}"
}

#
# append key value
#
append () {
    local key="$1"
    local value="${*:2}"

    echo  -n "${value}" >> "${store}/${key}"
}

#
# appendr key value
# (line after value)
#
appendr () {
    local key="$1"
    local value="${*:2}"

    echo -n "${value}" >> "${store}/${key}"
    echo "" >> "${store}/${key}"
}

#
# get key
#
get () {
    local key="$1"

    cat "${store}/${key}"
}


#
# path key
#
path () {
    local key="$1"

    echo "${store}/${key}"
}


#
# del key
#
del () {
    local key="$1"

    rm "${store}/${key}"
}


#
# list key ...args
#
list () {
    local listCommand="$1"

    declare -F "list_${listCommand}" &> /dev/null && "list_${listCommand}" ${@:2} || echo "${errorBanner}"
}

# list add key item
list_del () {
    local key="$1"
    local item="$2"

    cat "${store}/${key}" | (grep -q -v "${item}" || echo "") > "${store}/${key}"
}

# list del key item
list_add () {
    local key="$1"
    local item="$2"

    appendr "${key}" "${item}"
}

# list for key func
list_foreach () {
    local key="$1"
    local callback="$2"

    while read item; do "${callback}" "${item}"; done < "${store}/${key}"
}


#
# list key ...args
#
dict () {
    local dictCommand="$1"
    local dictCommandFunctionName="$1"

    # command wrappers (when a command name is bash expression...)
    case "${dictCommand}" in
        set) dictCommandFunctionName="setProp";;
    esac

    declare -F "dict_${dictCommandFunctionName}" &> /dev/null && "dict_${dictCommandFunctionName}" ${@:2} || echo "${errorBanner}"
}

# dict set key prop value comment
dict_setProp () {
    local key="$1"
    local prop="$2"
    local value="$3"
    local comment="${*:4}"

    list_add "${key}" "# [${prop}] $comment"
    list_add "${key}" "${prop}=${value}"
}

#
# BODY
#
main () {
[ -z ${command} ] && command="help"
    store=${SHKV_STORE}
    if [ "${command}" != "help" ] && [ "${store}" = "" ]; then
        echo "aborted. target store absolute path should be pointed with SHKV_STORE environment variable"
        exit
    fi
    mkdir -p "${store}"

    # command wrappers (when a command name is bash expression...)
    case "${command}" in
        set) commandFunctionName="setVal";;
    esac

    declare -F ${commandFunctionName} &> /dev/null && ${commandFunctionName} $@ || echo "${errorBanner}"
}

command="$1"
commandFunctionName="$1"
store=${SHKV_STORE}
cwd=$(pwd)

main ${@:2}
